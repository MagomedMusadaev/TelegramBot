
Необходимо разработать сервис, который будет получать курсы валют по API, сохранять их в базе данных и отдавать пользователям посредством REST API + Telegram бота.

h3. Алгоритм работы

* При запуске сервиса и затем каждые 5 минут происходит обновление курса валют для основных монет (BTC, ETH) в фоне;
* Клиент отправляет команды на получение курса валют или отправляет запрос на сервис
* Клиент может видеть минимальную и максимальную цену за день, изменение в процентах за последний час;
* Клиент может включить/выключить автоматическую отправку данных по курсам через Telegram бот.

h3. Требования

* Код должен быть покрыт тестами;
* Используется Docker, чтобы каждый мог указать настройки, поднять у себя сервис и все должно работать;
* Используется реляционная база данных;
* Оптимальные подходы;
* Настройка CI/CD
* Документация OpenAPI

h3. API

* GET /rates
* GET /rates/{cryptocurrency}

h3. Команды в Telegram боте

* /start
* /rates
* /rates {cryptocurrency}
* /start-auto {minutes_count} (пример /start-auto 10, что значит отправлять каждые 10 минут)
* /stop-auto

************************************

Вот план действий для реализации вашего проекта по разработке сервиса для получения курсов валют с использованием REST API и Telegram бота:

1. Анализ требований и проектирование архитектуры
    Определение требований: Подробно проработать функциональные и нефункциональные требования.
    Проектирование архитектуры: Определить архитектурные компоненты, включая сервер, базу данных, API и Telegram бота.
2. Выбор технологий
    Язык программирования: Python, JavaScript (Node.js) или другой по выбору.
    Фреймворк: Flask или FastAPI для Python; Express для Node.js.
    База данных: PostgreSQL или MySQL.
    API для курсов валют: Выбрать надежное API (например, CoinGecko или CoinMarketCap).
    Docker: Для контейнеризации приложения.
    Telegram API: Для взаимодействия с Telegram ботом.
3. Настройка окружения
    Создание репозитория: Инициализировать Git-репозиторий для проекта.
    Docker: Создать Dockerfile и docker-compose.yml для настройки окружения.
    Установка зависимостей: Определить и установить необходимые библиотеки.
4. Разработка API
    Создание REST API:
    Реализовать GET /rates для получения всех курсов валют.
    Реализовать GET /rates/{cryptocurrency} для получения курса конкретной криптовалюты.
    Обработка ошибок: Добавить обработку ошибок и логирование.
5. Разработка бота Telegram
    Создание бота: Использовать библиотеку (например, python-telegram-bot для Python).
    Реализация команд:
    /start: Приветственное сообщение.
    /rates: Получение всех курсов.
    /rates {cryptocurrency}: Получение курса конкретной криптовалюты.
    /start-auto {minutes_count}: Включение автоматической отправки курсов.
    /stop-auto: Остановка автоматической отправки.
6. Фоновая задача для обновления курсов
    Создание фонового процесса: Использовать celery или встроенные задачи для обновления курсов каждые 5 минут.
    Сохранение данных: Реализовать логику для сохранения и обновления курсов в базе данных.
7. Настройка базы данных
    Создание схемы базы данных: Определить таблицы для хранения курсов и другой необходимой информации.
    Миграции: Настроить миграции для управления изменениями схемы базы данных.
8. Тестирование
    Покрытие тестами: Написать юнит-тесты для API и логики бота.
    Интеграционные тесты: Проверить взаимодействие между компонентами системы.
    Тестирование производительности: Оценить производительность сервиса под нагрузкой.
9. Настройка CI/CD
    Инструменты CI/CD: Использовать GitHub Actions, Travis CI или другой инструмент для автоматизации сборки и развертывания.
    Автоматизация тестов: Настроить выполнение тестов в процессе CI.
10. Документация
    OpenAPI: Создать документацию для API с помощью Swagger или другого инструмента.
    Документация для разработчиков: Написать инструкции по развертыванию и использованию сервиса.
11. Развертывание
    Подготовка окружения: Настроить сервер (например, на DigitalOcean или AWS).
    Развертывание приложения: Использовать Docker для развертывания приложения на сервере.
12. Поддержка и улучшения
    Мониторинг: Настроить мониторинг приложения и базы данных.
    Обратная связь: Собрать обратную связь от пользователей и внести улучшения.
    Следуя этому плану, вы сможете создать функциональный сервис для получения и предоставления курсов валют через REST API и Telegram бот.